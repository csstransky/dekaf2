diff -ur /home/onelink/hermes/dekaf2/from/folly/../../../../libs/folly/folly/Assume.cpp ./Assume.cpp
--- /home/onelink/hermes/dekaf2/from/folly/../../../../libs/folly/folly/Assume.cpp	2017-09-05 13:58:46.406910865 +0200
+++ ./Assume.cpp	2017-09-25 21:01:30.582733364 +0200
@@ -16,14 +16,14 @@
 
 #include <folly/Assume.h>
 
-#include <glog/logging.h>
+//#include <glog/logging.h>
 
 namespace folly {
 
 namespace detail {
 
 void assume_check(bool cond) {
-  CHECK(cond) << "compiler-hint assumption fails at runtime";
+//  CHECK(cond) << "compiler-hint assumption fails at runtime";
 }
 
 }
diff -ur /home/onelink/hermes/dekaf2/from/folly/../../../../libs/folly/folly/concurrency/CacheLocality.cpp ./concurrency/CacheLocality.cpp
--- /home/onelink/hermes/dekaf2/from/folly/../../../../libs/folly/folly/concurrency/CacheLocality.cpp	2017-09-05 13:58:46.433909725 +0200
+++ ./concurrency/CacheLocality.cpp	2017-09-25 21:01:30.586733191 +0200
@@ -22,11 +22,11 @@
 #endif
 #include <fstream>
 
-#include <folly/Conv.h>
-#include <folly/Exception.h>
-#include <folly/FileUtil.h>
-#include <folly/Format.h>
-#include <folly/ScopeGuard.h>
+//#include <folly/Conv.h>
+//#include <folly/Exception.h>
+//#include <folly/FileUtil.h>
+//#include <folly/Format.h>
+//#include <folly/ScopeGuard.h>
 
 namespace folly {
 
@@ -87,8 +87,10 @@
   char* end;
   unsigned long val = strtoul(raw, &end, 10);
   if (end == raw || (*end != ',' && *end != '-' && *end != '\n' && *end != 0)) {
-    throw std::runtime_error(
-        to<std::string>("error parsing list '", line, "'").c_str());
+	  std::string sErr = "error parsing list '";
+	  sErr += line;
+	  sErr += '\'';
+    throw std::runtime_error(sErr.c_str());
   }
   return val;
 }
@@ -108,8 +110,10 @@
     auto cpu = cpus.size();
     std::vector<size_t> levels;
     for (size_t index = 0;; ++index) {
-      auto dir =
-          sformat("/sys/devices/system/cpu/cpu{}/cache/index{}/", cpu, index);
+      std::string dir = "/sys/devices/system/cpu/cpu";
+	  dir += std::to_string(cpu);
+	  dir += "/cache/index";
+	  dir += std::to_string(index);
       auto cacheType = mapping(dir + "type");
       auto equivStr = mapping(dir + "shared_cpu_list");
       if (cacheType.size() == 0 || equivStr.size() == 0) {
diff -ur /home/onelink/hermes/dekaf2/from/folly/../../../../libs/folly/folly/detail/Futex.cpp ./detail/Futex.cpp
--- /home/onelink/hermes/dekaf2/from/folly/../../../../libs/folly/folly/detail/Futex.cpp	2017-09-05 13:58:46.437909557 +0200
+++ ./detail/Futex.cpp	2017-09-25 21:01:30.588733105 +0200
@@ -17,7 +17,7 @@
 #include <folly/detail/Futex.h>
 #include <boost/intrusive/list.hpp>
 #include <folly/Hash.h>
-#include <folly/ScopeGuard.h>
+//#include <folly/ScopeGuard.h>
 #include <folly/portability/SysSyscall.h>
 #include <stdint.h>
 #include <string.h>
diff -ur /home/onelink/hermes/dekaf2/from/folly/../../../../libs/folly/folly/Malloc.h ./Malloc.h
--- /home/onelink/hermes/dekaf2/from/folly/../../../../libs/folly/folly/Malloc.h	2017-09-05 13:58:46.421910232 +0200
+++ ./Malloc.h	2017-09-25 21:01:30.586733191 +0200
@@ -198,14 +198,47 @@
   return result;
 }
 
+#ifdef FOLLY_PROVIDE_EXPONENTIAL_MALLOC_FALLBACK
+inline size_t portableCLZ(size_t value)
+{
+	if (!value) return 8 * sizeof(value);
+#ifdef __GNUC__
+	return static_cast<size_t>(__builtin_clzl(value));
+#elif _MSVC
+	DWORD clzl = 0;
+	if (_BitScanForward(&clzl, value))
+	{
+		return (8 * sizeof(value) - 1) - static_cast<size_t>(clzl);
+	}
+	else
+	{
+		return 8 * sizeof(value);
+	}
+#else
+	abort();
+#endif
+}
+#endif
+
 inline size_t goodMallocSize(size_t minSize) noexcept {
   if (minSize == 0) {
     return 0;
   }
 
   if (!usingJEMalloc()) {
+#ifdef FOLLY_PROVIDE_EXPONENTIAL_MALLOC_FALLBACK
+	  size_t result = 1 << ((sizeof(size_t) * 8 - portableCLZ(minSize)));
+	  const size_t pageSize = 4098;
+	  const size_t mallocHeader = 4 * sizeof(void*);
+	  if (result >= pageSize && result - mallocHeader >= minSize) {
+		  // check if we can make a bit room for the malloc implementation
+		  result -= mallocHeader;
+	  }
+	  return result;
+#else
     // Not using jemalloc - no smarts
     return minSize;
+#endif
   }
 
   return nallocx(minSize, 0);
diff -ur /home/onelink/hermes/dekaf2/from/folly/../../../../libs/folly/folly/portability/Constexpr.h ./portability/Constexpr.h
--- /home/onelink/hermes/dekaf2/from/folly/../../../../libs/folly/folly/portability/Constexpr.h	2017-09-05 13:58:46.501906856 +0200
+++ ./portability/Constexpr.h	2017-10-06 10:48:02.071601868 +0200
@@ -40,7 +40,7 @@
 
 template <>
 constexpr size_t constexpr_strlen(const char* s) {
-#if defined(__clang__)
+#if defined(__clang__) || defined(__GNUC__)
   return __builtin_strlen(s);
 #elif defined(_MSC_VER) || defined(__CUDACC__)
   return detail::constexpr_strlen_internal(s, 0);
diff -ur /home/onelink/hermes/dekaf2/from/folly/../../../../libs/folly/folly/Portability.h ./Portability.h
--- /home/onelink/hermes/dekaf2/from/folly/../../../../libs/folly/folly/Portability.h	2017-09-05 13:58:46.424910105 +0200
+++ ./Portability.h	2017-09-25 21:01:30.586733191 +0200
@@ -49,7 +49,9 @@
 using max_alignment = integral_sequence_max<size_t, alignof(Ts)...>;
 
 using max_basic_alignment = max_alignment<
+#if !defined(__GNUC__) || (__GNUC__ >= 5)
     std::max_align_t,
+#endif
     long double,
     double,
     float,
diff -ur /home/onelink/hermes/dekaf2/from/folly/../../../../libs/folly/folly/Range.h ./Range.h
--- /home/onelink/hermes/dekaf2/from/folly/../../../../libs/folly/folly/Range.h	2017-09-05 13:58:46.425910063 +0200
+++ ./Range.h	2017-10-06 12:00:36.553580573 +0200
@@ -379,16 +379,19 @@
   template <class T = Iter, typename detail::IsCharPointer<T>::const_type = 0>
   Range& operator=(std::string&& rhs) = delete;
 
+  constexpr
   void clear() {
     b_ = Iter();
     e_ = Iter();
   }
 
+  constexpr
   void assign(Iter start, Iter end) {
     b_ = start;
     e_ = end;
   }
 
+  constexpr
   void reset(Iter start, size_type size) {
     b_ = start;
     e_ = start + size;
@@ -432,18 +435,22 @@
   constexpr Iter cend() const {
     return e_;
   }
+  constexpr
   value_type& front() {
     assert(b_ < e_);
     return *b_;
   }
+  constexpr
   value_type& back() {
     assert(b_ < e_);
     return detail::value_before(e_);
   }
+  constexpr
   const value_type& front() const {
     assert(b_ < e_);
     return *b_;
   }
+  constexpr
   const value_type& back() const {
     assert(b_ < e_);
     return detail::value_before(e_);
@@ -468,7 +475,8 @@
   }
 
   // Works only for Range<const char*> and Range<char*>
-  int compare(const const_range_type& o) const {
+    constexpr
+    int compare(const const_range_type& o) const {
     const size_type tsize = this->size();
     const size_type osize = o.size();
     const size_type msize = std::min(tsize, osize);
@@ -489,6 +497,7 @@
     return b_[i];
   }
 
+  constexpr
   const value_type& operator[](size_t i) const {
     DCHECK_GT(size(), i);
     return b_[i];
@@ -501,6 +510,7 @@
     return b_[i];
   }
 
+  constexpr
   const value_type& at(size_t i) const {
     if (i >= size()) {
       std::__throw_out_of_range("index out of range");
@@ -537,6 +547,7 @@
     return hash;
   }
 
+  constexpr
   void advance(size_type n) {
     if (UNLIKELY(n > size())) {
       std::__throw_out_of_range("index out of range");
@@ -544,6 +555,7 @@
     b_ += n;
   }
 
+  constexpr
   void subtract(size_type n) {
     if (UNLIKELY(n > size())) {
       std::__throw_out_of_range("index out of range");
@@ -560,11 +572,13 @@
   }
 
   // unchecked versions
+  constexpr
   void uncheckedAdvance(size_type n) {
     DCHECK_LE(n, size());
     b_ += n;
   }
 
+  constexpr
   void uncheckedSubtract(size_type n) {
     DCHECK_LE(n, size());
     e_ -= n;
